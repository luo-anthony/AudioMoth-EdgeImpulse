/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.05.2022 15:19:24

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting_audiomoth/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C"
{
  extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace
{

  constexpr int kTensorArenaSize = 2128;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
  uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
  uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
  uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
  uint8_t *tensor_arena = NULL;
#endif

  static uint8_t *tensor_boundary;
  static uint8_t *current_location;

  template <int SZ, class T>
  struct TfArray
  {
    int sz;
    T elem[SZ];
  };
  enum used_operators_e
  {
    OP_RESHAPE,
    OP_CONV_2D,
    OP_MAX_POOL_2D,
    OP_FULLY_CONNECTED,
    OP_SOFTMAX,
    OP_LAST
  };
  struct TensorInfo_t
  { // subset of TfLiteTensor used for initialization from constant memory
    TfLiteAllocationType allocation_type;
    TfLiteType type;
    void *data;
    TfLiteIntArray *dims;
    size_t bytes;
    TfLiteQuantization quantization;
  };
  struct NodeInfo_t
  { // subset of TfLiteNode used for initialization from constant memory
    struct TfLiteIntArray *inputs;
    struct TfLiteIntArray *outputs;
    void *builtin_data;
    used_operators_e used_op_index;
  };

  TfLiteContext ctx{};
  TfLiteTensor tflTensors[26];
  TfLiteEvalTensor tflEvalTensors[26];
  TfLiteRegistration registrations[OP_LAST];
  TfLiteNode tflNodes[12];

  const TfArray<2, int> tensor_dimension0 = {2, {1, 650}};
  const TfArray<1, float> quant0_scale = {1, {
                                                 0.034024909138679504,
                                             }};
  const TfArray<1, int> quant0_zero = {1, {-5}};
  const TfLiteAffineQuantization quant0 = {(TfLiteFloatArray *)&quant0_scale, (TfLiteIntArray *)&quant0_zero, 0};
  const ALIGN(16) int32_t tensor_data1[4] = {
      1,
      1,
      50,
      13,
  };
  const TfArray<1, int> tensor_dimension1 = {1, {4}};
  const ALIGN(16) int32_t tensor_data2[4] = {
      1,
      50,
      1,
      8,
  };
  const TfArray<1, int> tensor_dimension2 = {1, {4}};
  const ALIGN(16) int32_t tensor_data3[4] = {
      1,
      1,
      25,
      8,
  };
  const TfArray<1, int> tensor_dimension3 = {1, {4}};
  const ALIGN(16) int32_t tensor_data4[4] = {
      1,
      25,
      1,
      16,
  };
  const TfArray<1, int> tensor_dimension4 = {1, {4}};
  const ALIGN(8) int32_t tensor_data5[2] = {
      -1,
      208,
  };
  const TfArray<1, int> tensor_dimension5 = {1, {2}};
  const ALIGN(16) int8_t tensor_data6[8 * 1 * 3 * 13] = {
      /* [0][0][][] */ -99,
      81,
      -16,
      -29,
      65,
      -39,
      -1,
      -2,
      84,
      -40,
      -32,
      5,
      -37,
      18,
      22,
      -18,
      -59,
      -31,
      -11,
      -68,
      -48,
      35,
      5,
      95,
      76,
      26,
      -127,
      34,
      34,
      -28,
      16,
      13,
      -114,
      1,
      74,
      39,
      -59,
      -59,
      -5,
      /* [1][0][][] */ 40,
      -35,
      -55,
      65,
      -28,
      -54,
      76,
      -78,
      -15,
      44,
      -12,
      -83,
      74,
      24,
      14,
      42,
      47,
      -29,
      12,
      -23,
      -82,
      121,
      -17,
      -66,
      55,
      21,
      24,
      -26,
      -39,
      127,
      -84,
      -42,
      28,
      -105,
      30,
      -55,
      60,
      -51,
      30,
      /* [2][0][][] */ 20,
      -46,
      -55,
      80,
      -127,
      -56,
      -55,
      34,
      -81,
      -52,
      35,
      61,
      70,
      32,
      -42,
      -78,
      43,
      -26,
      0,
      78,
      -42,
      3,
      -26,
      91,
      -21,
      9,
      1,
      -52,
      -74,
      -13,
      -80,
      -2,
      103,
      -74,
      33,
      -11,
      -18,
      -17,
      38,
      /* [3][0][][] */ -100,
      -3,
      -74,
      -15,
      120,
      -50,
      3,
      65,
      -47,
      56,
      4,
      3,
      18,
      127,
      47,
      -100,
      0,
      65,
      -80,
      -56,
      55,
      22,
      35,
      -75,
      25,
      -62,
      -32,
      -8,
      -94,
      -33,
      87,
      30,
      -7,
      -1,
      -49,
      -12,
      -48,
      64,
      -12,
      /* [4][0][][] */ -12,
      30,
      -41,
      49,
      78,
      -51,
      30,
      19,
      -98,
      48,
      -6,
      23,
      46,
      31,
      26,
      -61,
      53,
      -66,
      -6,
      -70,
      48,
      9,
      19,
      -127,
      24,
      -17,
      -33,
      -36,
      31,
      -51,
      45,
      -15,
      61,
      -1,
      -62,
      -25,
      51,
      47,
      -54,
      /* [5][0][][] */ 114,
      -5,
      46,
      -65,
      17,
      27,
      -126,
      -34,
      56,
      -68,
      -81,
      44,
      82,
      57,
      -48,
      53,
      40,
      91,
      31,
      23,
      24,
      60,
      70,
      -64,
      -9,
      -66,
      113,
      -48,
      17,
      55,
      127,
      94,
      -114,
      0,
      -24,
      43,
      -80,
      -34,
      -107,
      /* [6][0][][] */ -89,
      -39,
      -65,
      -78,
      11,
      -37,
      67,
      9,
      -47,
      87,
      -12,
      -24,
      24,
      -72,
      63,
      63,
      104,
      -21,
      -60,
      -76,
      -9,
      -57,
      -46,
      -4,
      -116,
      4,
      -106,
      -54,
      97,
      -48,
      -127,
      -89,
      -32,
      51,
      -28,
      79,
      -34,
      -119,
      -33,
      /* [7][0][][] */ -4,
      -23,
      15,
      54,
      30,
      -88,
      0,
      23,
      -31,
      20,
      -127,
      6,
      -12,
      48,
      -45,
      1,
      -25,
      5,
      27,
      20,
      44,
      -10,
      63,
      44,
      61,
      24,
      -76,
      4,
      68,
      69,
      4,
      -15,
      38,
      -5,
      -19,
      -20,
      36,
      -44,
      4,
  };
  const TfArray<4, int> tensor_dimension6 = {4, {8, 1, 3, 13}};
  const TfArray<8, float> quant6_scale = {8, {
                                                 0.0036661108024418354,
                                                 0.0033963012974709272,
                                                 0.0037155451718717813,
                                                 0.0032022863160818815,
                                                 0.0035407284740358591,
                                                 0.0031172700691968203,
                                                 0.0032539381645619869,
                                                 0.0053226309828460217,
                                             }};
  const TfArray<8, int> quant6_zero = {8, {0, 0, 0, 0, 0, 0, 0, 0}};
  const TfLiteAffineQuantization quant6 = {(TfLiteFloatArray *)&quant6_scale, (TfLiteIntArray *)&quant6_zero, 0};
  const ALIGN(16) int32_t tensor_data7[8] = {
      -2269,
      -1533,
      -951,
      -3290,
      -1410,
      -1879,
      -1201,
      -644,
  };
  const TfArray<1, int> tensor_dimension7 = {1, {8}};
  const TfArray<8, float> quant7_scale = {8, {
                                                 0.0001247390900971368,
                                                 0.00011555883975233883,
                                                 0.00012642108777072281,
                                                 0.00010895750165218487,
                                                 0.0001204729633172974,
                                                 0.00010606482828734443,
                                                 0.00011071495100622997,
                                                 0.00018110203382093459,
                                             }};
  const TfArray<8, int> quant7_zero = {8, {0, 0, 0, 0, 0, 0, 0, 0}};
  const TfLiteAffineQuantization quant7 = {(TfLiteFloatArray *)&quant7_scale, (TfLiteIntArray *)&quant7_zero, 0};
  const ALIGN(16) int8_t tensor_data8[16 * 1 * 3 * 8] = {
      /* [0][0][][] */ -3,
      -62,
      -71,
      23,
      -39,
      -72,
      41,
      -61,
      101,
      -51,
      -127,
      -4,
      -5,
      -77,
      12,
      -52,
      34,
      -87,
      26,
      27,
      37,
      51,
      14,
      -15,
      /* [1][0][][] */ -2,
      99,
      -86,
      -44,
      18,
      -62,
      72,
      29,
      -35,
      -48,
      10,
      50,
      -36,
      -8,
      -72,
      -4,
      58,
      127,
      35,
      97,
      23,
      -37,
      -45,
      8,
      /* [2][0][][] */ -72,
      17,
      -112,
      -32,
      -15,
      127,
      -59,
      -57,
      78,
      12,
      -68,
      54,
      0,
      -20,
      -56,
      79,
      -44,
      -36,
      -68,
      -84,
      -41,
      33,
      34,
      -23,
      /* [3][0][][] */ -49,
      -21,
      -2,
      -3,
      -23,
      127,
      -2,
      119,
      -68,
      -65,
      -5,
      78,
      18,
      43,
      39,
      -26,
      -40,
      -95,
      -21,
      -10,
      -40,
      33,
      37,
      -52,
      /* [4][0][][] */ 45,
      26,
      28,
      -4,
      36,
      -81,
      -7,
      47,
      -44,
      -26,
      -20,
      -40,
      -44,
      -96,
      -1,
      86,
      49,
      -22,
      127,
      45,
      -79,
      87,
      -83,
      46,
      /* [5][0][][] */ 32,
      -42,
      -84,
      19,
      44,
      116,
      24,
      127,
      -57,
      -61,
      -66,
      90,
      84,
      84,
      -111,
      -39,
      -25,
      -82,
      21,
      -29,
      24,
      -4,
      -123,
      102,
      /* [6][0][][] */ 40,
      73,
      72,
      127,
      9,
      -40,
      -110,
      65,
      6,
      22,
      38,
      -50,
      -8,
      41,
      -67,
      -55,
      -40,
      110,
      -4,
      -8,
      10,
      -57,
      -57,
      -5,
      /* [7][0][][] */ -124,
      -68,
      113,
      -15,
      -50,
      127,
      87,
      94,
      -29,
      -111,
      -39,
      34,
      123,
      41,
      30,
      -103,
      -102,
      -106,
      -91,
      35,
      61,
      -1,
      -51,
      71,
      /* [8][0][][] */ -124,
      -62,
      20,
      -53,
      -17,
      -8,
      39,
      87,
      -28,
      -53,
      -127,
      91,
      108,
      36,
      54,
      81,
      -37,
      -47,
      11,
      -89,
      4,
      -97,
      97,
      106,
      /* [9][0][][] */ 36,
      -100,
      16,
      -16,
      48,
      58,
      -125,
      -71,
      20,
      58,
      122,
      -86,
      7,
      28,
      72,
      -127,
      -57,
      -25,
      110,
      1,
      -25,
      4,
      8,
      -13,
      /* [10][0][][] */ -27,
      -16,
      38,
      -25,
      -17,
      -63,
      -27,
      -23,
      103,
      43,
      -14,
      -8,
      62,
      14,
      78,
      -69,
      12,
      4,
      -63,
      -127,
      -81,
      -22,
      34,
      -34,
      /* [11][0][][] */ -17,
      -127,
      -9,
      8,
      -24,
      -121,
      67,
      -31,
      -54,
      5,
      95,
      -13,
      -41,
      -59,
      25,
      66,
      15,
      -2,
      -70,
      37,
      64,
      -65,
      101,
      -8,
      /* [12][0][][] */ 69,
      -32,
      -96,
      -97,
      19,
      98,
      119,
      -101,
      -79,
      -30,
      75,
      -81,
      39,
      -66,
      127,
      4,
      -4,
      -18,
      -54,
      -105,
      -59,
      95,
      29,
      93,
      /* [13][0][][] */ 39,
      -30,
      -127,
      109,
      -58,
      -110,
      -2,
      -115,
      -17,
      -106,
      38,
      9,
      79,
      11,
      -100,
      -84,
      -11,
      -122,
      -45,
      98,
      32,
      5,
      86,
      -43,
      /* [14][0][][] */ -23,
      -7,
      -8,
      -7,
      -95,
      127,
      -34,
      -61,
      -5,
      -13,
      -70,
      -22,
      33,
      14,
      -31,
      -38,
      -75,
      31,
      -8,
      -48,
      -59,
      81,
      7,
      -10,
      /* [15][0][][] */ 61,
      -33,
      -47,
      -6,
      -45,
      -109,
      9,
      -33,
      -3,
      -16,
      -10,
      -71,
      39,
      16,
      127,
      -15,
      40,
      -12,
      68,
      -90,
      -56,
      28,
      -45,
      19,
  };
  const TfArray<4, int> tensor_dimension8 = {4, {16, 1, 3, 8}};
  const TfArray<16, float> quant8_scale = {16, {
                                                   0.0041801733896136284,
                                                   0.0035757615696638823,
                                                   0.0035280506126582623,
                                                   0.0035271914675831795,
                                                   0.0031862067990005016,
                                                   0.0028241556137800217,
                                                   0.003307347884401679,
                                                   0.0026517019141465425,
                                                   0.002887107664719224,
                                                   0.0025839025620371103,
                                                   0.0031811981461942196,
                                                   0.0033537759445607662,
                                                   0.0024272205773741007,
                                                   0.002890812698751688,
                                                   0.0042569008655846119,
                                                   0.0035744449123740196,
                                               }};
  const TfArray<16, int> quant8_zero = {16, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
  const TfLiteAffineQuantization quant8 = {(TfLiteFloatArray *)&quant8_scale, (TfLiteIntArray *)&quant8_zero, 0};
  const ALIGN(16) int32_t tensor_data9[16] = {
      -1454,
      -1319,
      -5,
      -1153,
      -1988,
      -1941,
      -2407,
      -823,
      -763,
      -1105,
      -805,
      -1363,
      -672,
      -1259,
      -590,
      50,
  };
  const TfArray<1, int> tensor_dimension9 = {1, {16}};
  const TfArray<16, float> quant9_scale = {16, {
                                                   9.0663976152427495e-05,
                                                   7.7554854215122759e-05,
                                                   7.6520052971318364e-05,
                                                   7.650141924386844e-05,
                                                   6.9105786678846925e-05,
                                                   6.125323852756992e-05,
                                                   7.1733222284819931e-05,
                                                   5.7512886996846646e-05,
                                                   6.2618608353659511e-05,
                                                   5.6042383221210912e-05,
                                                   6.8997156631667167e-05,
                                                   7.2740200266707689e-05,
                                                   5.2644099923782051e-05,
                                                   6.2698971305508167e-05,
                                                   9.2328118626028299e-05,
                                                   7.7526303357444704e-05,
                                               }};
  const TfArray<16, int> quant9_zero = {16, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
  const TfLiteAffineQuantization quant9 = {(TfLiteFloatArray *)&quant9_scale, (TfLiteIntArray *)&quant9_zero, 0};
  const ALIGN(16) int8_t tensor_data10[20 * 208] = {
      6,
      -8,
      45,
      34,
      -17,
      71,
      37,
      42,
      29,
      -29,
      26,
      3,
      24,
      37,
      54,
      -13,
      0,
      6,
      -23,
      13,
      33,
      63,
      -34,
      26,
      1,
      -7,
      -65,
      44,
      -18,
      10,
      46,
      43,
      -28,
      18,
      3,
      27,
      -2,
      34,
      28,
      31,
      59,
      28,
      -12,
      -10,
      11,
      -18,
      74,
      44,
      -75,
      -42,
      15,
      -19,
      -36,
      -11,
      14,
      38,
      -18,
      -12,
      20,
      11,
      52,
      11,
      35,
      -30,
      -44,
      -74,
      72,
      9,
      -9,
      48,
      -7,
      15,
      -12,
      30,
      -57,
      -25,
      29,
      -58,
      96,
      -36,
      -5,
      -13,
      7,
      17,
      -49,
      2,
      -43,
      39,
      12,
      19,
      -19,
      -3,
      -21,
      -2,
      54,
      19,
      -16,
      -12,
      46,
      28,
      14,
      44,
      -24,
      77,
      -8,
      -40,
      44,
      0,
      44,
      -23,
      22,
      5,
      18,
      -9,
      23,
      13,
      -3,
      -21,
      -26,
      12,
      -15,
      -45,
      -20,
      -15,
      19,
      16,
      12,
      -26,
      2,
      50,
      28,
      39,
      -27,
      -14,
      3,
      -1,
      -6,
      7,
      -7,
      -6,
      18,
      -29,
      58,
      -20,
      -11,
      33,
      12,
      -6,
      -13,
      -22,
      33,
      -22,
      -17,
      15,
      52,
      50,
      -3,
      -9,
      -2,
      -54,
      -2,
      -27,
      -22,
      -5,
      -30,
      -44,
      33,
      -22,
      1,
      -29,
      46,
      3,
      -8,
      -24,
      -61,
      43,
      27,
      14,
      1,
      -63,
      26,
      -65,
      48,
      -26,
      -33,
      1,
      48,
      10,
      26,
      -72,
      -49,
      47,
      44,
      -17,
      24,
      -12,
      -24,
      -46,
      3,
      0,
      -47,
      -36,
      13,
      -4,
      50,
      4,
      29,
      -43,
      13,
      13,
      -47,
      7,
      -24,
      -17,
      0,
      16,
      -31,
      31,
      -12,
      29,
      13,
      -30,
      -36,
      17,
      -8,
      29,
      -78,
      -43,
      32,
      -16,
      43,
      -11,
      -51,
      23,
      12,
      -5,
      -36,
      -40,
      3,
      30,
      -25,
      -47,
      -32,
      -54,
      -21,
      -60,
      -35,
      -30,
      22,
      9,
      21,
      -30,
      -74,
      -34,
      23,
      8,
      -51,
      -33,
      -15,
      32,
      28,
      -22,
      2,
      22,
      -43,
      -14,
      18,
      -27,
      16,
      6,
      15,
      -28,
      -29,
      18,
      3,
      2,
      -7,
      -49,
      3,
      14,
      -8,
      -4,
      -3,
      -15,
      -40,
      8,
      -46,
      -5,
      15,
      11,
      1,
      26,
      -36,
      21,
      -38,
      27,
      1,
      -36,
      -14,
      -23,
      -52,
      29,
      -8,
      24,
      -4,
      -42,
      -40,
      7,
      -17,
      -9,
      -24,
      21,
      -18,
      -52,
      -29,
      25,
      -11,
      15,
      -19,
      25,
      -22,
      -20,
      18,
      18,
      10,
      -15,
      -11,
      3,
      -65,
      -33,
      -35,
      4,
      -26,
      -3,
      -48,
      -30,
      12,
      -32,
      37,
      -35,
      -18,
      -7,
      -50,
      0,
      -19,
      11,
      16,
      -23,
      13,
      4,
      -8,
      24,
      22,
      -22,
      -1,
      -13,
      -46,
      -40,
      -2,
      -52,
      0,
      34,
      -2,
      -16,
      -38,
      -41,
      -20,
      7,
      -26,
      -2,
      -21,
      -41,
      31,
      -46,
      1,
      -42,
      -17,
      -41,
      32,
      21,
      -40,
      19,
      -13,
      -9,
      30,
      7,
      -19,
      -46,
      0,
      -14,
      -16,
      21,
      -52,
      11,
      -5,
      4,
      -50,
      -25,
      -46,
      2,
      -44,
      55,
      -10,
      -45,
      20,
      -36,
      -16,
      -27,
      -13,
      16,
      -24,
      -33,
      -27,
      18,
      -48,
      -49,
      -22,
      25,
      64,
      80,
      25,
      29,
      -13,
      78,
      46,
      -32,
      -37,
      0,
      -15,
      28,
      52,
      14,
      22,
      2,
      32,
      39,
      -14,
      44,
      21,
      6,
      2,
      -24,
      39,
      -7,
      45,
      25,
      10,
      29,
      28,
      4,
      55,
      20,
      36,
      10,
      -9,
      3,
      10,
      0,
      -35,
      -15,
      2,
      -33,
      58,
      -2,
      0,
      -39,
      6,
      21,
      -52,
      24,
      -56,
      47,
      -31,
      13,
      37,
      -32,
      35,
      -2,
      93,
      -34,
      -31,
      -36,
      2,
      -12,
      -13,
      22,
      -62,
      -27,
      1,
      25,
      31,
      8,
      49,
      13,
      45,
      -23,
      31,
      4,
      -76,
      -12,
      -27,
      -29,
      -52,
      5,
      -6,
      -26,
      -13,
      70,
      -10,
      -101,
      13,
      83,
      3,
      -14,
      64,
      4,
      5,
      18,
      -45,
      55,
      25,
      -49,
      26,
      -53,
      -4,
      -65,
      47,
      -37,
      -35,
      25,
      22,
      37,
      -29,
      -2,
      -43,
      12,
      -3,
      -14,
      -70,
      11,
      29,
      61,
      46,
      59,
      -40,
      9,
      -6,
      30,
      -34,
      64,
      45,
      48,
      14,
      43,
      10,
      -5,
      -16,
      -5,
      18,
      -26,
      -20,
      21,
      17,
      40,
      -11,
      -2,
      -3,
      10,
      -8,
      20,
      -14,
      22,
      20,
      -8,
      6,
      10,
      -19,
      -17,
      61,
      47,
      20,
      -40,
      18,
      0,
      -12,
      -19,
      2,
      12,
      4,
      -37,
      42,
      3,
      -18,
      30,
      9,
      1,
      64,
      -13,
      7,
      54,
      67,
      20,
      58,
      -8,
      62,
      -38,
      -8,
      12,
      12,
      34,
      -17,
      41,
      73,
      51,
      47,
      73,
      65,
      27,
      15,
      30,
      -9,
      -1,
      -10,
      -56,
      -43,
      -4,
      -28,
      21,
      46,
      68,
      -65,
      8,
      9,
      -46,
      23,
      13,
      31,
      62,
      20,
      -30,
      4,
      -42,
      -10,
      7,
      0,
      5,
      -47,
      22,
      42,
      -38,
      35,
      1,
      -62,
      6,
      -17,
      -48,
      51,
      -17,
      10,
      -17,
      -24,
      -40,
      -51,
      31,
      27,
      -58,
      -8,
      -14,
      37,
      -41,
      27,
      -7,
      37,
      7,
      -14,
      -52,
      1,
      -5,
      26,
      -57,
      -30,
      30,
      26,
      30,
      20,
      -60,
      -5,
      2,
      -69,
      0,
      0,
      -1,
      10,
      -36,
      -21,
      -15,
      -47,
      12,
      -6,
      -21,
      -22,
      -29,
      28,
      -1,
      -27,
      7,
      -27,
      -51,
      28,
      -64,
      0,
      6,
      -23,
      13,
      5,
      0,
      -46,
      -5,
      16,
      -18,
      -59,
      24,
      -25,
      9,
      -7,
      -46,
      2,
      5,
      -15,
      -5,
      6,
      34,
      40,
      -42,
      13,
      -33,
      13,
      -62,
      -9,
      8,
      -40,
      -62,
      -39,
      10,
      -14,
      -3,
      5,
      -4,
      -63,
      -66,
      -12,
      16,
      16,
      -38,
      -19,
      -6,
      -9,
      -20,
      -40,
      -28,
      1,
      -1,
      23,
      29,
      28,
      33,
      -42,
      17,
      45,
      -26,
      57,
      17,
      -27,
      40,
      -21,
      39,
      2,
      -29,
      38,
      38,
      33,
      60,
      -45,
      54,
      -30,
      61,
      29,
      -12,
      -13,
      66,
      34,
      -2,
      27,
      19,
      17,
      -29,
      -42,
      -11,
      11,
      6,
      -14,
      16,
      -37,
      22,
      6,
      20,
      44,
      24,
      -37,
      8,
      -38,
      7,
      -59,
      46,
      -63,
      20,
      -16,
      -20,
      24,
      -14,
      -29,
      44,
      35,
      15,
      -3,
      32,
      -1,
      -30,
      40,
      45,
      -5,
      -23,
      -13,
      -45,
      -19,
      16,
      -17,
      27,
      -6,
      -29,
      -2,
      -49,
      33,
      23,
      -8,
      21,
      3,
      1,
      7,
      -42,
      29,
      -50,
      -37,
      -49,
      6,
      -3,
      -21,
      -21,
      18,
      19,
      14,
      -51,
      -43,
      -39,
      -30,
      -33,
      10,
      7,
      24,
      -2,
      34,
      19,
      15,
      34,
      -44,
      31,
      -50,
      -41,
      -2,
      30,
      18,
      10,
      -51,
      28,
      1,
      10,
      -37,
      24,
      -31,
      34,
      -54,
      10,
      -33,
      1,
      -45,
      -50,
      16,
      1,
      -32,
      9,
      -13,
      -9,
      -44,
      0,
      31,
      -55,
      -20,
      23,
      -32,
      46,
      -2,
      -8,
      -41,
      -22,
      -28,
      -11,
      -40,
      -25,
      13,
      18,
      -17,
      -21,
      33,
      -6,
      20,
      -37,
      3,
      6,
      -49,
      -37,
      25,
      -37,
      -31,
      -51,
      -38,
      11,
      -13,
      -34,
      14,
      34,
      11,
      36,
      30,
      32,
      35,
      -21,
      -11,
      -34,
      -37,
      11,
      -31,
      -8,
      -56,
      -41,
      -56,
      -19,
      -6,
      -48,
      -53,
      8,
      -5,
      -10,
      -53,
      -22,
      4,
      -31,
      25,
      13,
      -41,
      10,
      -15,
      -8,
      -10,
      -4,
      -4,
      -21,
      -30,
      -41,
      16,
      10,
      11,
      -13,
      -54,
      -43,
      10,
      -29,
      -4,
      -33,
      -31,
      -34,
      -12,
      -21,
      16,
      -27,
      -1,
      -32,
      10,
      0,
      -24,
      -17,
      -48,
      -20,
      -46,
      12,
      -28,
      49,
      0,
      33,
      -28,
      -26,
      27,
      -8,
      -7,
      -6,
      25,
      -38,
      -12,
      0,
      -51,
      -19,
      -36,
      52,
      28,
      3,
      -42,
      -16,
      -8,
      30,
      -45,
      -39,
      5,
      -41,
      34,
      -30,
      34,
      12,
      -4,
      17,
      -38,
      -12,
      -16,
      59,
      -44,
      -62,
      18,
      -40,
      -11,
      -15,
      -16,
      35,
      0,
      -28,
      14,
      -2,
      -38,
      47,
      17,
      -18,
      -8,
      38,
      47,
      22,
      -11,
      -10,
      22,
      19,
      10,
      -15,
      -7,
      -5,
      -20,
      -22,
      21,
      21,
      -19,
      37,
      7,
      -5,
      37,
      26,
      11,
      -71,
      5,
      -10,
      14,
      39,
      -24,
      -33,
      81,
      70,
      -4,
      -20,
      42,
      45,
      -5,
      3,
      47,
      -17,
      -35,
      46,
      9,
      83,
      -28,
      -29,
      -24,
      9,
      -50,
      -26,
      -18,
      21,
      53,
      -25,
      36,
      12,
      16,
      15,
      20,
      55,
      20,
      10,
      -1,
      62,
      11,
      -6,
      -21,
      47,
      21,
      -68,
      -20,
      -46,
      -7,
      -52,
      -17,
      45,
      -35,
      -25,
      13,
      59,
      -97,
      -18,
      73,
      15,
      61,
      -71,
      -54,
      -3,
      0,
      26,
      -23,
      64,
      -17,
      -29,
      41,
      35,
      -35,
      -48,
      1,
      -25,
      2,
      13,
      -29,
      -9,
      19,
      -4,
      -4,
      30,
      9,
      -17,
      61,
      39,
      55,
      23,
      -7,
      -40,
      -10,
      -37,
      -20,
      -50,
      46,
      -42,
      38,
      2,
      -85,
      17,
      48,
      27,
      -23,
      -42,
      26,
      35,
      -22,
      8,
      3,
      -47,
      22,
      -10,
      33,
      -4,
      -4,
      -21,
      25,
      -36,
      -39,
      35,
      57,
      7,
      31,
      59,
      24,
      17,
      -14,
      -67,
      -19,
      46,
      -3,
      5,
      3,
      14,
      -55,
      8,
      26,
      -52,
      42,
      -17,
      13,
      23,
      3,
      -43,
      -41,
      42,
      -33,
      -43,
      60,
      -75,
      -2,
      11,
      -52,
      8,
      -12,
      -41,
      -39,
      37,
      29,
      -14,
      -10,
      -12,
      40,
      74,
      -51,
      18,
      29,
      60,
      24,
      55,
      47,
      -1,
      16,
      6,
      -20,
      19,
      32,
      9,
      47,
      -26,
      -6,
      30,
      8,
      -6,
      16,
      8,
      29,
      79,
      46,
      17,
      -59,
      16,
      -4,
      5,
      80,
      -13,
      -25,
      43,
      45,
      52,
      40,
      -25,
      10,
      34,
      33,
      19,
      31,
      30,
      -51,
      48,
      69,
      -35,
      -54,
      -30,
      -32,
      44,
      -13,
      -45,
      10,
      32,
      -71,
      -7,
      9,
      11,
      6,
      -30,
      15,
      -52,
      52,
      17,
      15,
      -5,
      -41,
      -29,
      -66,
      -57,
      23,
      -9,
      -13,
      -14,
      -50,
      -10,
      -5,
      24,
      32,
      -32,
      -63,
      -43,
      -46,
      -39,
      9,
      35,
      -49,
      42,
      40,
      45,
      67,
      -12,
      -8,
      54,
      0,
      -31,
      54,
      -3,
      7,
      -42,
      -27,
      4,
      -11,
      4,
      -33,
      7,
      8,
      -100,
      13,
      22,
      -63,
      25,
      22,
      -19,
      1,
      -25,
      -49,
      -16,
      -34,
      32,
      -5,
      -2,
      15,
      -40,
      29,
      8,
      -72,
      9,
      -6,
      3,
      25,
      14,
      -18,
      -8,
      15,
      -12,
      18,
      34,
      52,
      -12,
      -11,
      18,
      -43,
      23,
      11,
      59,
      38,
      14,
      -25,
      -6,
      21,
      -7,
      -30,
      37,
      22,
      -45,
      3,
      -24,
      5,
      -34,
      56,
      7,
      -1,
      -25,
      -28,
      -56,
      14,
      -2,
      -18,
      20,
      2,
      -46,
      48,
      12,
      -14,
      -12,
      77,
      -41,
      -32,
      0,
      -47,
      36,
      29,
      -16,
      -4,
      52,
      0,
      -16,
      51,
      0,
      16,
      124,
      -2,
      -17,
      -4,
      52,
      -25,
      45,
      13,
      -26,
      4,
      -15,
      34,
      3,
      -6,
      -22,
      29,
      -2,
      -50,
      -44,
      26,
      -43,
      -13,
      -50,
      -67,
      25,
      3,
      -47,
      3,
      9,
      -58,
      51,
      28,
      42,
      -17,
      22,
      28,
      -28,
      -16,
      6,
      13,
      -13,
      -1,
      -8,
      -26,
      -38,
      -61,
      -94,
      20,
      47,
      44,
      41,
      10,
      49,
      28,
      -44,
      27,
      -19,
      6,
      -28,
      -41,
      36,
      -50,
      -69,
      8,
      22,
      13,
      -21,
      -5,
      70,
      80,
      -38,
      35,
      33,
      -6,
      55,
      33,
      98,
      -106,
      -9,
      41,
      89,
      -46,
      34,
      46,
      -12,
      63,
      12,
      53,
      21,
      4,
      -31,
      27,
      55,
      -19,
      -53,
      21,
      68,
      31,
      -13,
      7,
      -22,
      89,
      -67,
      -15,
      -16,
      -5,
      -84,
      -84,
      119,
      -39,
      -98,
      37,
      11,
      -62,
      -21,
      69,
      -29,
      46,
      -31,
      -5,
      46,
      -26,
      6,
      -32,
      87,
      -10,
      19,
      105,
      22,
      -66,
      -55,
      40,
      -8,
      66,
      -49,
      -26,
      -33,
      91,
      56,
      -42,
      -31,
      -40,
      -84,
      52,
      -10,
      -27,
      -31,
      21,
      -34,
      55,
      -27,
      -83,
      -11,
      58,
      -26,
      -22,
      -8,
      -59,
      -11,
      36,
      24,
      -4,
      -12,
      -18,
      20,
      -24,
      -62,
      -59,
      4,
      27,
      -13,
      40,
      76,
      -25,
      30,
      3,
      56,
      -85,
      31,
      1,
      70,
      -13,
      53,
      19,
      -33,
      -12,
      -120,
      40,
      55,
      -70,
      -20,
      7,
      -24,
      21,
      22,
      27,
      29,
      44,
      -64,
      -61,
      -25,
      -34,
      -13,
      -48,
      68,
      10,
      -4,
      38,
      -89,
      42,
      2,
      -19,
      4,
      16,
      -23,
      -64,
      13,
      0,
      -46,
      20,
      -7,
      -22,
      95,
      -5,
      -7,
      -38,
      -31,
      -42,
      -36,
      -9,
      -41,
      -40,
      -17,
      5,
      -28,
      -7,
      34,
      -40,
      1,
      -17,
      33,
      -38,
      -36,
      -32,
      -17,
      21,
      -38,
      -17,
      10,
      -36,
      -47,
      -34,
      -53,
      -31,
      -11,
      5,
      -46,
      -8,
      31,
      -46,
      17,
      -13,
      23,
      15,
      15,
      -8,
      -22,
      -22,
      -35,
      -25,
      11,
      -13,
      -29,
      -11,
      4,
      -29,
      -48,
      -10,
      22,
      -8,
      16,
      -5,
      -18,
      25,
      -13,
      -4,
      27,
      18,
      -8,
      32,
      -9,
      28,
      -53,
      -31,
      -6,
      -39,
      27,
      13,
      30,
      -48,
      30,
      -20,
      -13,
      -36,
      -46,
      -47,
      -4,
      -57,
      21,
      -46,
      -1,
      -20,
      25,
      26,
      7,
      -35,
      0,
      29,
      15,
      26,
      -55,
      -36,
      19,
      -58,
      -15,
      -3,
      34,
      -14,
      33,
      4,
      38,
      -28,
      5,
      45,
      5,
      -21,
      39,
      8,
      -37,
      -40,
      37,
      -3,
      20,
      -32,
      -24,
      -12,
      -14,
      14,
      -12,
      36,
      -33,
      15,
      -28,
      -44,
      -5,
      34,
      19,
      -42,
      -40,
      11,
      -25,
      4,
      1,
      -44,
      -25,
      30,
      -4,
      19,
      55,
      -54,
      18,
      -44,
      27,
      27,
      38,
      22,
      -29,
      -15,
      -31,
      22,
      -22,
      28,
      -10,
      1,
      -16,
      -40,
      -51,
      -52,
      25,
      -44,
      19,
      32,
      -24,
      -14,
      -28,
      -27,
      -18,
      -23,
      -28,
      -8,
      29,
      -18,
      -25,
      15,
      -6,
      -38,
      -38,
      -35,
      -17,
      4,
      -19,
      11,
      -45,
      9,
      41,
      17,
      -45,
      -34,
      -46,
      1,
      -9,
      -37,
      28,
      -7,
      -6,
      18,
      -54,
      -19,
      -38,
      0,
      -13,
      36,
      -5,
      -68,
      27,
      22,
      -10,
      -36,
      -33,
      19,
      13,
      26,
      29,
      -10,
      -8,
      6,
      62,
      26,
      61,
      -59,
      -22,
      51,
      29,
      4,
      38,
      -26,
      -23,
      -10,
      -27,
      2,
      31,
      -55,
      25,
      10,
      9,
      -33,
      -17,
      -5,
      11,
      20,
      -34,
      -34,
      28,
      -39,
      -3,
      -27,
      -23,
      7,
      -19,
      -7,
      18,
      25,
      -15,
      -30,
      29,
      45,
      19,
      0,
      40,
      -24,
      -45,
      -7,
      -59,
      -27,
      -56,
      19,
      39,
      -28,
      -54,
      8,
      -42,
      20,
      -51,
      2,
      -28,
      -12,
      -29,
      8,
      32,
      -1,
      -30,
      47,
      -46,
      -84,
      -27,
      36,
      34,
      28,
      15,
      -27,
      27,
      9,
      -18,
      -41,
      -10,
      31,
      -29,
      25,
      -24,
      18,
      -29,
      26,
      10,
      26,
      -7,
      -42,
      0,
      27,
      15,
      -4,
      48,
      24,
      -39,
      -23,
      -41,
      28,
      -23,
      -36,
      -12,
      -29,
      0,
      -22,
      27,
      19,
      -18,
      -37,
      16,
      1,
      -31,
      24,
      -34,
      -3,
      7,
      21,
      24,
      -16,
      16,
      2,
      41,
      17,
      6,
      -12,
      5,
      19,
      -1,
      3,
      -64,
      25,
      16,
      -36,
      -44,
      -49,
      -34,
      -24,
      -16,
      51,
      -42,
      36,
      60,
      -35,
      -34,
      25,
      69,
      16,
      -13,
      16,
      36,
      -16,
      14,
      55,
      -59,
      -10,
      23,
      1,
      4,
      -41,
      58,
      23,
      24,
      37,
      -14,
      -29,
      -45,
      33,
      -38,
      -27,
      31,
      -24,
      5,
      28,
      14,
      8,
      -24,
      -30,
      -37,
      -62,
      5,
      28,
      -39,
      -23,
      33,
      10,
      -34,
      11,
      -17,
      23,
      8,
      -15,
      93,
      -40,
      10,
      -77,
      -76,
      -46,
      -5,
      -5,
      -12,
      -78,
      89,
      0,
      -1,
      27,
      60,
      -72,
      62,
      -24,
      16,
      17,
      -10,
      8,
      35,
      -4,
      -9,
      28,
      0,
      38,
      41,
      12,
      -20,
      -41,
      -38,
      5,
      6,
      -38,
      -27,
      2,
      4,
      33,
      25,
      50,
      -45,
      -53,
      7,
      -42,
      24,
      -50,
      -68,
      98,
      49,
      -32,
      15,
      46,
      58,
      56,
      -58,
      37,
      54,
      47,
      48,
      60,
      95,
      -99,
      31,
      -33,
      -1,
      5,
      7,
      43,
      1,
      94,
      47,
      -28,
      32,
      -5,
      -41,
      21,
      73,
      -90,
      23,
      11,
      70,
      63,
      -32,
      -12,
      20,
      20,
      -70,
      24,
      35,
      28,
      -31,
      -80,
      110,
      -11,
      -84,
      11,
      44,
      -44,
      -39,
      -9,
      -7,
      82,
      -81,
      -21,
      51,
      25,
      32,
      -31,
      41,
      -91,
      -4,
      17,
      45,
      0,
      -42,
      -2,
      -45,
      89,
      -48,
      31,
      64,
      46,
      36,
      -2,
      -5,
      -73,
      18,
      48,
      28,
      15,
      9,
      34,
      -7,
      69,
      -76,
      -63,
      31,
      16,
      58,
      -2,
      -7,
      -89,
      64,
      52,
      0,
      36,
      -7,
      4,
      -18,
      74,
      -40,
      -68,
      -43,
      2,
      -59,
      57,
      56,
      0,
      75,
      0,
      -6,
      -66,
      -7,
      -7,
      24,
      51,
      60,
      21,
      14,
      33,
      -83,
      3,
      23,
      -10,
      0,
      31,
      -16,
      24,
      32,
      -18,
      46,
      22,
      -6,
      -34,
      -46,
      24,
      -50,
      -5,
      55,
      69,
      -13,
      97,
      -50,
      42,
      -12,
      -47,
      -40,
      -56,
      -9,
      -35,
      24,
      -23,
      -76,
      -12,
      10,
      -46,
      80,
      12,
      -52,
      4,
      -11,
      -21,
      26,
      20,
      -24,
      -27,
      -48,
      -8,
      -38,
      -52,
      -24,
      -11,
      -37,
      4,
      -28,
      21,
      -34,
      -6,
      -29,
      26,
      -22,
      -27,
      -22,
      -29,
      -34,
      -54,
      32,
      -23,
      -35,
      32,
      9,
      -14,
      -24,
      5,
      36,
      -8,
      28,
      -52,
      -35,
      -15,
      25,
      -19,
      19,
      -30,
      7,
      -50,
      21,
      -51,
      -14,
      -26,
      -35,
      28,
      -17,
      -37,
      -38,
      19,
      -4,
      25,
      -44,
      -8,
      -45,
      -16,
      21,
      -13,
      -21,
      23,
      18,
      -27,
      -29,
      -46,
      -54,
      28,
      -1,
      -28,
      -30,
      -16,
      -24,
      16,
      13,
      34,
      -13,
      24,
      35,
      -36,
      -45,
      -8,
      17,
      -8,
      -36,
      19,
      -46,
      -36,
      -15,
      -41,
      -44,
      -42,
      17,
      28,
      -56,
      -56,
      34,
      -43,
      9,
      -16,
      0,
      -47,
      -53,
      -31,
      -20,
      -50,
      27,
      -54,
      -34,
      33,
      -47,
      -2,
      -10,
      -49,
      -12,
      -33,
      -42,
      26,
      21,
      8,
      -40,
      -6,
      -21,
      29,
      -8,
      0,
      29,
      -21,
      22,
      -12,
      17,
      14,
      -37,
      15,
      45,
      -18,
      -16,
      -21,
      30,
      20,
      1,
      -47,
      7,
      -16,
      36,
      -26,
      -49,
      -52,
      3,
      11,
      5,
      -49,
      -33,
      28,
      -58,
      -5,
      -11,
      -35,
      -48,
      8,
      -33,
      -10,
      -33,
      -41,
      -43,
      -34,
      30,
      -36,
      -19,
      13,
      -41,
      11,
      -32,
      33,
      11,
      -45,
      -45,
      -54,
      16,
      -4,
      -18,
      -7,
      33,
      32,
      -45,
      3,
      6,
      23,
      7,
      16,
      -37,
      -51,
      -4,
      6,
      31,
      -51,
      -3,
      -9,
      0,
      -39,
      30,
      24,
      16,
      53,
      25,
      70,
      58,
      1,
      25,
      104,
      41,
      -3,
      -12,
      53,
      58,
      87,
      25,
      -72,
      -7,
      29,
      67,
      -4,
      8,
      14,
      28,
      24,
      0,
      -42,
      -67,
      12,
      10,
      13,
      11,
      -21,
      -42,
      46,
      32,
      17,
      79,
      -27,
      106,
      27,
      -1,
      1,
      11,
      -9,
      37,
      98,
      -37,
      -96,
      3,
      12,
      -4,
      17,
      39,
      -53,
      53,
      -17,
      -44,
      -47,
      -32,
      -20,
      -19,
      61,
      31,
      -21,
      24,
      67,
      -25,
      24,
      -7,
      -56,
      41,
      -12,
      -53,
      -25,
      -8,
      -34,
      60,
      -30,
      -76,
      12,
      15,
      -19,
      42,
      -9,
      8,
      -55,
      -2,
      29,
      -61,
      32,
      68,
      25,
      -21,
      38,
      8,
      35,
      -3,
      4,
      -56,
      -42,
      -44,
      -5,
      -46,
      -13,
      -62,
      31,
      -46,
      -6,
      -65,
      41,
      -7,
      -58,
      -29,
      41,
      -30,
      -5,
      -34,
      23,
      -16,
      -48,
      12,
      -39,
      -73,
      30,
      53,
      57,
      19,
      -56,
      -21,
      53,
      5,
      -3,
      3,
      -45,
      -15,
      23,
      -19,
      14,
      16,
      3,
      -11,
      127,
      -5,
      -74,
      3,
      -6,
      3,
      43,
      -6,
      -42,
      -16,
      15,
      107,
      -29,
      54,
      -6,
      2,
      27,
      -27,
      6,
      -20,
      17,
      -35,
      -52,
      -41,
      -16,
      13,
      5,
      -29,
      -21,
      25,
      -5,
      -58,
      102,
      7,
      15,
      24,
      13,
      -14,
      38,
      1,
      -8,
      -22,
      27,
      3,
      48,
      57,
      5,
      -47,
      41,
      85,
      -1,
      74,
      -5,
      20,
      -20,
      49,
      51,
      28,
      23,
      19,
      26,
      80,
      9,
      -3,
      56,
      -34,
      14,
      21,
      37,
      -15,
      -18,
      -3,
      -27,
      -19,
      28,
      -4,
      -14,
      -8,
      -28,
      35,
      -6,
      27,
      24,
      10,
      13,
      26,
      33,
      -41,
      -1,
      10,
      -48,
      32,
      -54,
      -42,
      0,
      -30,
      20,
      35,
      -51,
      32,
      25,
      -15,
      12,
      -14,
      31,
      30,
      2,
      -3,
      18,
      -24,
      -38,
      -16,
      5,
      -24,
      -41,
      -24,
      -28,
      -17,
      3,
      37,
      -52,
      4,
      1,
      -30,
      7,
      25,
      22,
      6,
      35,
      -30,
      11,
      -12,
      -39,
      -44,
      -51,
      33,
      18,
      25,
      36,
      -51,
      -6,
      -31,
      -33,
      -12,
      -5,
      -31,
      -41,
      -6,
      9,
      -34,
      -45,
      -34,
      -6,
      -45,
      -19,
      -1,
      0,
      -33,
      -43,
      -10,
      -47,
      16,
      -3,
      -26,
      -45,
      8,
      -3,
      10,
      -36,
      -11,
      -32,
      20,
      -9,
      3,
      -26,
      42,
      5,
      -10,
      -39,
      -28,
      -35,
      8,
      -34,
      6,
      -26,
      -51,
      12,
      30,
      7,
      5,
      -13,
      42,
      -16,
      25,
      -42,
      27,
      25,
      -27,
      -8,
      -34,
      -1,
      -28,
      -37,
      11,
      33,
      -7,
      28,
      -1,
      29,
      -35,
      29,
      -8,
      -5,
      7,
      -6,
      26,
      -42,
      35,
      3,
      32,
      -32,
      -30,
      -2,
      26,
      -38,
      24,
      3,
      14,
      -20,
      -4,
      -12,
      23,
      -31,
      -3,
      -51,
      -16,
      -52,
      -36,
      10,
      -36,
      -39,
      -16,
      -14,
      -49,
      -9,
      -8,
      28,
      -28,
      -41,
      15,
      -40,
      -12,
      14,
      12,
      -45,
      -23,
      -45,
      -34,
      -47,
      -26,
      -5,
      -1,
      21,
      -30,
      31,
      0,
      -40,
      -18,
      14,
      -10,
      -43,
      16,
      14,
      -16,
      26,
      2,
      -38,
      -42,
      0,
      -42,
      -54,
      29,
      -32,
      13,
      23,
      -49,
      19,
      -22,
      13,
      5,
      29,
      17,
      12,
      13,
      2,
      -7,
      -6,
      -43,
      -40,
      -33,
      -40,
      22,
      25,
      39,
      -27,
      44,
      22,
      -10,
      54,
      -33,
      13,
      -43,
      -5,
      21,
      -28,
      -16,
      -20,
      -23,
      -12,
      -51,
      30,
      -1,
      -22,
      -49,
      1,
      -7,
      18,
      -35,
      -48,
      -19,
      25,
      27,
      -24,
      -34,
      -44,
      -53,
      6,
      16,
      2,
      0,
      8,
      -1,
      -22,
      0,
      -11,
      -34,
      -36,
      -32,
      -53,
      -18,
      -27,
      -42,
      17,
      -23,
      -44,
      26,
      -45,
      -19,
      3,
      -30,
      -24,
      7,
      4,
      -33,
      -15,
      19,
      23,
      -55,
      -14,
      21,
      9,
      3,
      22,
      35,
      -29,
      -5,
      37,
      0,
      36,
      20,
      -29,
      33,
      6,
      -26,
      10,
      -26,
      -9,
      -49,
      -30,
      -44,
      -22,
      -11,
      -57,
      -22,
      -10,
      -51,
      20,
      -44,
      18,
      -43,
      -14,
      -33,
      -36,
      25,
      29,
      19,
      -19,
      26,
      -21,
      -13,
      1,
      -40,
      -8,
      4,
      -41,
      -16,
      29,
      8,
      5,
      -37,
      34,
      -29,
      0,
      -6,
      -7,
      2,
      -42,
      -30,
      -13,
      -18,
      -1,
      -34,
      -7,
      38,
      -42,
      8,
      -8,
      -25,
      -16,
      -41,
      -10,
      19,
      -32,
      -7,
      29,
      -38,
      1,
      7,
      -27,
      -25,
      -26,
      -19,
      -38,
      -24,
      -45,
      -22,
      27,
      -48,
      13,
      12,
      3,
      18,
      1,
      -41,
      -2,
      -5,
      -17,
      7,
      14,
      -3,
      8,
      37,
      -37,
      -40,
      -44,
      21,
      -2,
      -22,
      32,
      40,
      37,
      -19,
      -10,
      -64,
      37,
      -24,
      32,
      -76,
      -54,
      -70,
      29,
      25,
      40,
      -53,
      -8,
      -68,
      112,
      -27,
      70,
      21,
      66,
      -61,
      10,
      -33,
      21,
      -106,
      24,
      51,
      58,
      -51,
      7,
      -109,
      13,
      57,
      9,
      -19,
      36,
      -10,
      -28,
      -76,
      19,
      -65,
      -30,
      60,
      -6,
      -39,
      10,
      -52,
      8,
      50,
      9,
      -49,
      34,
      -2,
      15,
      -5,
      -9,
      6,
      -5,
      -4,
      -35,
      13,
      -13,
      -80,
      70,
      8,
      34,
      -20,
      17,
      -19,
      2,
      -9,
      22,
      59,
      39,
      48,
      12,
      76,
      25,
      -16,
      4,
      -9,
      1,
      -27,
      -63,
      45,
      -35,
      12,
      -13,
      38,
      -8,
      -47,
      10,
      44,
      33,
      -74,
      41,
      20,
      -73,
      -25,
      69,
      74,
      -34,
      0,
      7,
      -6,
      67,
      -33,
      -48,
      -5,
      0,
      -66,
      33,
      -42,
      -62,
      1,
      19,
      50,
      13,
      25,
      -66,
      57,
      61,
      -70,
      -18,
      54,
      43,
      107,
      3,
      10,
      45,
      -63,
      12,
      39,
      25,
      92,
      -14,
      72,
      -1,
      -33,
      -39,
      -41,
      50,
      1,
      24,
      16,
      -56,
      72,
      -18,
      -17,
      53,
      30,
      -64,
      15,
      -41,
      -32,
      -11,
      13,
      -16,
      -4,
      -12,
      -37,
      8,
      -7,
      96,
      31,
      -44,
      79,
      -19,
      -1,
      -14,
      9,
      -48,
      83,
      3,
      93,
      81,
      19,
      -27,
      -45,
      74,
      -3,
      3,
      28,
      31,
      -8,
      64,
      58,
      19,
      -35,
      26,
      -19,
      22,
      49,
      -53,
      44,
      0,
      1,
      -12,
      -16,
      26,
      -11,
      -16,
      -18,
      -4,
      47,
      11,
      24,
      -25,
      -37,
      30,
      17,
      81,
      84,
      31,
      67,
      40,
      30,
      51,
      32,
      -8,
      7,
      19,
      44,
      28,
      47,
      -16,
      -20,
      -11,
      41,
      49,
      26,
      31,
      44,
      -23,
      23,
      -13,
      28,
      -4,
      43,
      47,
      -9,
      -5,
      -9,
      27,
      -22,
      52,
      -30,
      56,
      4,
      20,
      -5,
      47,
      -45,
      -7,
      2,
      28,
      -10,
      -38,
      -18,
      18,
      23,
      -21,
      10,
      -54,
      11,
      12,
      -36,
      35,
      -3,
      6,
      -60,
      65,
      28,
      28,
      -54,
      54,
      42,
      -3,
      -20,
      -25,
      -39,
      9,
      0,
      0,
      -35,
      -10,
      -9,
      41,
      29,
      -38,
      -32,
      -31,
      32,
      29,
      -18,
      -13,
      14,
      -28,
      11,
      -33,
      62,
      83,
      -119,
      47,
      29,
      4,
      -1,
      54,
      41,
      4,
      52,
      -48,
      33,
      72,
      -50,
      37,
      15,
      -16,
      -86,
      -15,
      16,
      9,
      42,
      49,
      -5,
      2,
      50,
      -48,
      73,
      53,
      -33,
      2,
      20,
      9,
      -18,
      54,
      26,
      -47,
      -34,
      -20,
      19,
      -19,
      58,
      -39,
      60,
      7,
      -45,
      -20,
      3,
      60,
      -45,
      24,
      36,
      -75,
      3,
      26,
      -3,
      -2,
      -27,
      -13,
      43,
      0,
      -12,
      15,
      30,
      -2,
      -30,
      31,
      -57,
      -40,
      43,
      13,
      -34,
      -24,
      -47,
      -14,
      -30,
      45,
      28,
      38,
      35,
      38,
      -43,
      -4,
      47,
      45,
      61,
      -5,
      -39,
      26,
      -15,
      -37,
      24,
      55,
      16,
      -3,
      59,
      11,
      -36,
      -57,
      20,
      -2,
      86,
      50,
      26,
      59,
      32,
      27,
      34,
      28,
      -24,
      26,
      12,
      -29,
      -27,
      47,
      15,
      33,
      41,
      5,
      35,
      44,
      53,
      -29,
      22,
      14,
      29,
      -7,
      31,
      -8,
      15,
      76,
      -8,
      -8,
      22,
      65,
      -6,
      19,
      -8,
      25,
      40,
      61,
      47,
      38,
      17,
      38,
      46,
      66,
      -3,
      -42,
      -5,
      43,
      27,
      33,
      -9,
      -15,
      44,
      -15,
      66,
      23,
      30,
      37,
      -13,
      77,
      14,
      -75,
      -4,
      33,
      57,
      21,
      -45,
      -57,
      50,
      -71,
      19,
      52,
      -15,
      -7,
      -77,
      39,
      -33,
      44,
      -46,
      23,
      -3,
      25,
      31,
      -6,
      -5,
      -10,
      14,
      -9,
      45,
      -25,
      -37,
      65,
      -11,
      -22,
      -32,
      -66,
      61,
      -19,
      -27,
      -28,
      5,
      -6,
      47,
      -46,
      75,
      87,
      -34,
      3,
      73,
      -8,
      -63,
      62,
      6,
      -3,
      -14,
      13,
      45,
      57,
      -21,
      40,
      -35,
      41,
      -27,
      44,
      18,
      -37,
      27,
      30,
      7,
      3,
      60,
      -56,
      76,
      32,
      -42,
      -80,
      17,
      35,
      26,
      47,
      24,
      -56,
      -3,
      47,
      16,
      -15,
      47,
      -17,
      20,
      46,
      48,
      -44,
      13,
      18,
      -18,
      79,
      35,
      -74,
      15,
      -53,
      15,
      24,
      -29,
      -23,
      -1,
      52,
      16,
      20,
      -11,
      -9,
      -3,
      11,
      8,
      15,
      6,
      14,
      -5,
      32,
      -3,
      18,
      -44,
      44,
      53,
      45,
      72,
      -10,
      25,
      80,
      22,
      50,
      64,
      32,
      -11,
      65,
      -9,
      -22,
      20,
      -4,
      66,
      32,
      53,
      53,
      -58,
      -24,
      51,
      -74,
      46,
      -24,
      -2,
      47,
      11,
      25,
      -11,
      22,
      24,
      1,
      26,
      -5,
      48,
      -4,
      -12,
      1,
      -45,
      26,
      13,
      -50,
      17,
      -50,
      -28,
      -35,
      -1,
      -7,
      -27,
      -33,
      -4,
      -4,
      -32,
      -31,
      0,
      -16,
      -6,
      -44,
      -38,
      17,
      23,
      18,
      22,
      -48,
      4,
      -8,
      21,
      -27,
      -10,
      -19,
      46,
      -48,
      -29,
      -55,
      -12,
      13,
      13,
      -15,
      -45,
      2,
      41,
      -26,
      30,
      3,
      -8,
      -1,
      -38,
      23,
      12,
      -54,
      -46,
      -47,
      8,
      -44,
      3,
      -45,
      -44,
      35,
      29,
      -41,
      -24,
      -22,
      -43,
      -2,
      -56,
      5,
      -38,
      22,
      11,
      12,
      36,
      25,
      29,
      -5,
      7,
      10,
      -10,
      0,
      20,
      8,
      -9,
      34,
      -52,
      34,
      15,
      -2,
      -11,
      16,
      -45,
      -42,
      -18,
      22,
      -29,
      17,
      31,
      26,
      24,
      -31,
      -53,
      -14,
      -28,
      15,
      27,
      32,
      -42,
      21,
      -40,
      -52,
      -26,
      18,
      -29,
      44,
      6,
      6,
      -46,
      -45,
      -9,
      -13,
      13,
      -9,
      17,
      16,
      2,
      19,
      -49,
      -41,
      -13,
      -54,
      -53,
      -34,
      -45,
      -38,
      -3,
      16,
      11,
      -1,
      14,
      17,
      -16,
      -12,
      47,
      42,
      -48,
      -1,
      8,
      -43,
      29,
      -38,
      -49,
      -37,
      -6,
      -26,
      -16,
      13,
      3,
      -38,
      -17,
      -2,
      10,
      -19,
      -43,
      8,
      -48,
      -20,
      -12,
      -48,
      -28,
      1,
      9,
      -28,
      -15,
      -22,
      -39,
      8,
      -33,
      40,
      24,
      7,
      -26,
      24,
      -11,
      -37,
      -21,
      -10,
      17,
      -20,
      36,
      -29,
      -29,
      -43,
      -24,
      2,
      27,
      -25,
      17,
      -7,
      -17,
      -56,
      -5,
      -57,
      11,
      -33,
      25,
      -3,
      -46,
      17,
      29,
      -9,
      -26,
      59,
      -26,
      5,
      45,
      13,
      -9,
      -7,
      64,
      43,
      15,
      -11,
      -59,
      7,
      25,
      31,
      -23,
      8,
      -2,
      15,
      11,
      34,
      1,
      30,
      -1,
      10,
      1,
      40,
      37,
      -26,
      3,
      -10,
      24,
      -42,
      -7,
      41,
      56,
      1,
      -2,
      28,
      36,
      40,
      -55,
      38,
      46,
      -13,
      -61,
      -43,
      43,
      -1,
      -75,
      -13,
      6,
      17,
      -6,
      21,
      24,
      18,
      -27,
      -11,
      -5,
      -8,
      -49,
      53,
      -3,
      -49,
      43,
      -12,
      10,
      -35,
      -65,
      -8,
      -17,
      6,
      -43,
      34,
      4,
      -25,
      -3,
      7,
      12,
      -60,
      42,
      0,
      20,
      34,
      6,
      -25,
      -46,
      25,
      -71,
      -6,
      10,
      -23,
      22,
      23,
      55,
      -20,
      -54,
      14,
      -21,
      23,
      -63,
      10,
      -40,
      -16,
      11,
      57,
      -13,
      -35,
      -31,
      23,
      11,
      22,
      -36,
      3,
      -36,
      -52,
      26,
      -38,
      -9,
      -25,
      28,
      1,
      34,
      -13,
      -20,
      -9,
      -22,
      34,
      31,
      5,
      29,
      47,
      -13,
      2,
      -11,
      -33,
      -50,
      -25,
      -36,
      -67,
      -8,
      -57,
      33,
      42,
      25,
      -50,
      14,
      62,
      -23,
      33,
      -26,
      -33,
      11,
      0,
      -66,
      -2,
      -12,
      77,
      26,
      39,
      44,
      14,
      -3,
      57,
      -5,
      -52,
      58,
      -29,
      -3,
      17,
      31,
      -2,
      -14,
      34,
      -16,
      -24,
      23,
      -50,
      4,
      29,
      30,
      -5,
      19,
      36,
      -45,
      5,
      31,
      -55,
      66,
      -83,
      11,
      -9,
      -26,
      15,
      17,
      -9,
      41,
      35,
      69,
      -32,
      55,
      -94,
      -41,
  };
  const TfArray<2, int> tensor_dimension10 = {2, {20, 208}};
  const TfArray<1, float> quant10_scale = {1, {
                                                  0.003536952193826437,
                                              }};
  const TfArray<1, int> quant10_zero = {1, {0}};
  const TfLiteAffineQuantization quant10 = {(TfLiteFloatArray *)&quant10_scale, (TfLiteIntArray *)&quant10_zero, 0};
  const ALIGN(16) int32_t tensor_data11[20] = {
      141,
      -839,
      367,
      -146,
      -603,
      557,
      -239,
      1051,
      -614,
      -21,
      1657,
      -571,
      13,
      -436,
      -532,
      284,
      199,
      437,
      -542,
      -165,
  };
  const TfArray<1, int> tensor_dimension11 = {1, {20}};
  const TfArray<1, float> quant11_scale = {1, {
                                                  6.3196515839081258e-05,
                                              }};
  const TfArray<1, int> quant11_zero = {1, {0}};
  const TfLiteAffineQuantization quant11 = {(TfLiteFloatArray *)&quant11_scale, (TfLiteIntArray *)&quant11_zero, 0};
  const ALIGN(16) int8_t tensor_data12[2 * 20] = {
      34,
      -41,
      75,
      -33,
      -68,
      -92,
      -33,
      -107,
      -24,
      8,
      -127,
      -85,
      85,
      -76,
      68,
      20,
      97,
      45,
      -40,
      -35,
      -40,
      27,
      -90,
      74,
      -1,
      43,
      -86,
      -52,
      -87,
      52,
      -59,
      9,
      18,
      -46,
      50,
      -65,
      -4,
      -68,
      -14,
      -83,
  };
  const TfArray<2, int> tensor_dimension12 = {2, {2, 20}};
  const TfArray<1, float> quant12_scale = {1, {
                                                  0.0055205770768225193,
                                              }};
  const TfArray<1, int> quant12_zero = {1, {0}};
  const TfLiteAffineQuantization quant12 = {(TfLiteFloatArray *)&quant12_scale, (TfLiteIntArray *)&quant12_zero, 0};
  const ALIGN(8) int32_t tensor_data13[2] = {
      -138,
      138,
  };
  const TfArray<1, int> tensor_dimension13 = {1, {2}};
  const TfArray<1, float> quant13_scale = {1, {
                                                  0.00014925641880836338,
                                              }};
  const TfArray<1, int> quant13_zero = {1, {0}};
  const TfLiteAffineQuantization quant13 = {(TfLiteFloatArray *)&quant13_scale, (TfLiteIntArray *)&quant13_zero, 0};
  const TfArray<4, int> tensor_dimension14 = {4, {1, 1, 50, 13}};
  const TfArray<1, float> quant14_scale = {1, {
                                                  0.034024909138679504,
                                              }};
  const TfArray<1, int> quant14_zero = {1, {-5}};
  const TfLiteAffineQuantization quant14 = {(TfLiteFloatArray *)&quant14_scale, (TfLiteIntArray *)&quant14_zero, 0};
  const TfArray<4, int> tensor_dimension15 = {4, {1, 1, 50, 8}};
  const TfArray<1, float> quant15_scale = {1, {
                                                  0.021689046174287796,
                                              }};
  const TfArray<1, int> quant15_zero = {1, {-128}};
  const TfLiteAffineQuantization quant15 = {(TfLiteFloatArray *)&quant15_scale, (TfLiteIntArray *)&quant15_zero, 0};
  const TfArray<4, int> tensor_dimension16 = {4, {1, 50, 1, 8}};
  const TfArray<1, float> quant16_scale = {1, {
                                                  0.021689046174287796,
                                              }};
  const TfArray<1, int> quant16_zero = {1, {-128}};
  const TfLiteAffineQuantization quant16 = {(TfLiteFloatArray *)&quant16_scale, (TfLiteIntArray *)&quant16_zero, 0};
  const TfArray<4, int> tensor_dimension17 = {4, {1, 25, 1, 8}};
  const TfArray<1, float> quant17_scale = {1, {
                                                  0.021689046174287796,
                                              }};
  const TfArray<1, int> quant17_zero = {1, {-128}};
  const TfLiteAffineQuantization quant17 = {(TfLiteFloatArray *)&quant17_scale, (TfLiteIntArray *)&quant17_zero, 0};
  const TfArray<4, int> tensor_dimension18 = {4, {1, 1, 25, 8}};
  const TfArray<1, float> quant18_scale = {1, {
                                                  0.021689046174287796,
                                              }};
  const TfArray<1, int> quant18_zero = {1, {-128}};
  const TfLiteAffineQuantization quant18 = {(TfLiteFloatArray *)&quant18_scale, (TfLiteIntArray *)&quant18_zero, 0};
  const TfArray<4, int> tensor_dimension19 = {4, {1, 1, 25, 16}};
  const TfArray<1, float> quant19_scale = {1, {
                                                  0.017867505550384521,
                                              }};
  const TfArray<1, int> quant19_zero = {1, {-128}};
  const TfLiteAffineQuantization quant19 = {(TfLiteFloatArray *)&quant19_scale, (TfLiteIntArray *)&quant19_zero, 0};
  const TfArray<4, int> tensor_dimension20 = {4, {1, 25, 1, 16}};
  const TfArray<1, float> quant20_scale = {1, {
                                                  0.017867505550384521,
                                              }};
  const TfArray<1, int> quant20_zero = {1, {-128}};
  const TfLiteAffineQuantization quant20 = {(TfLiteFloatArray *)&quant20_scale, (TfLiteIntArray *)&quant20_zero, 0};
  const TfArray<4, int> tensor_dimension21 = {4, {1, 13, 1, 16}};
  const TfArray<1, float> quant21_scale = {1, {
                                                  0.017867505550384521,
                                              }};
  const TfArray<1, int> quant21_zero = {1, {-128}};
  const TfLiteAffineQuantization quant21 = {(TfLiteFloatArray *)&quant21_scale, (TfLiteIntArray *)&quant21_zero, 0};
  const TfArray<2, int> tensor_dimension22 = {2, {1, 208}};
  const TfArray<1, float> quant22_scale = {1, {
                                                  0.017867505550384521,
                                              }};
  const TfArray<1, int> quant22_zero = {1, {-128}};
  const TfLiteAffineQuantization quant22 = {(TfLiteFloatArray *)&quant22_scale, (TfLiteIntArray *)&quant22_zero, 0};
  const TfArray<2, int> tensor_dimension23 = {2, {1, 20}};
  const TfArray<1, float> quant23_scale = {1, {
                                                  0.027036380022764206,
                                              }};
  const TfArray<1, int> quant23_zero = {1, {-128}};
  const TfLiteAffineQuantization quant23 = {(TfLiteFloatArray *)&quant23_scale, (TfLiteIntArray *)&quant23_zero, 0};
  const TfArray<2, int> tensor_dimension24 = {2, {1, 2}};
  const TfArray<1, float> quant24_scale = {1, {
                                                  0.079087786376476288,
                                              }};
  const TfArray<1, int> quant24_zero = {1, {18}};
  const TfLiteAffineQuantization quant24 = {(TfLiteFloatArray *)&quant24_scale, (TfLiteIntArray *)&quant24_zero, 0};
  const TfArray<2, int> tensor_dimension25 = {2, {1, 2}};
  const TfArray<1, float> quant25_scale = {1, {
                                                  0.00390625,
                                              }};
  const TfArray<1, int> quant25_zero = {1, {-128}};
  const TfLiteAffineQuantization quant25 = {(TfLiteFloatArray *)&quant25_scale, (TfLiteIntArray *)&quant25_zero, 0};
  const TfLiteReshapeParams opdata0 = {{
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                       },
                                       0};
  const TfArray<2, int> inputs0 = {2, {0, 1}};
  const TfArray<1, int> outputs0 = {1, {14}};
  const TfLiteConvParams opdata1 = {kTfLitePaddingSame, 1, 1, kTfLiteActRelu, 1, 1};
  const TfArray<3, int> inputs1 = {3, {14, 6, 7}};
  const TfArray<1, int> outputs1 = {1, {15}};
  const TfLiteReshapeParams opdata2 = {{
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                       },
                                       0};
  const TfArray<2, int> inputs2 = {2, {15, 2}};
  const TfArray<1, int> outputs2 = {1, {16}};
  const TfLitePoolParams opdata3 = {kTfLitePaddingSame, 1, 2, 1, 2, kTfLiteActNone, {{0, 0, 0, 0}}};
  const TfArray<1, int> inputs3 = {1, {16}};
  const TfArray<1, int> outputs3 = {1, {17}};
  const TfLiteReshapeParams opdata4 = {{
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                       },
                                       0};
  const TfArray<2, int> inputs4 = {2, {17, 3}};
  const TfArray<1, int> outputs4 = {1, {18}};
  const TfLiteConvParams opdata5 = {kTfLitePaddingSame, 1, 1, kTfLiteActRelu, 1, 1};
  const TfArray<3, int> inputs5 = {3, {18, 8, 9}};
  const TfArray<1, int> outputs5 = {1, {19}};
  const TfLiteReshapeParams opdata6 = {{
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                       },
                                       0};
  const TfArray<2, int> inputs6 = {2, {19, 4}};
  const TfArray<1, int> outputs6 = {1, {20}};
  const TfLitePoolParams opdata7 = {kTfLitePaddingSame, 1, 2, 1, 2, kTfLiteActNone, {{0, 0, 0, 0}}};
  const TfArray<1, int> inputs7 = {1, {20}};
  const TfArray<1, int> outputs7 = {1, {21}};
  const TfLiteReshapeParams opdata8 = {{
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                           0,
                                       },
                                       0};
  const TfArray<2, int> inputs8 = {2, {21, 5}};
  const TfArray<1, int> outputs8 = {1, {22}};
  const TfLiteFullyConnectedParams opdata9 = {kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
  const TfArray<3, int> inputs9 = {3, {22, 10, 11}};
  const TfArray<1, int> outputs9 = {1, {23}};
  const TfLiteFullyConnectedParams opdata10 = {kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
  const TfArray<3, int> inputs10 = {3, {23, 12, 13}};
  const TfArray<1, int> outputs10 = {1, {24}};
  const TfLiteSoftmaxParams opdata11 = {1};
  const TfArray<1, int> inputs11 = {1, {24}};
  const TfArray<1, int> outputs11 = {1, {25}};
  const TensorInfo_t tensorData[] = {
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 656,
          (TfLiteIntArray *)&tensor_dimension0,
          650,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant0))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data1,
          (TfLiteIntArray *)&tensor_dimension1,
          16,
          {kTfLiteNoQuantization, nullptr},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data2,
          (TfLiteIntArray *)&tensor_dimension2,
          16,
          {kTfLiteNoQuantization, nullptr},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data3,
          (TfLiteIntArray *)&tensor_dimension3,
          16,
          {kTfLiteNoQuantization, nullptr},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data4,
          (TfLiteIntArray *)&tensor_dimension4,
          16,
          {kTfLiteNoQuantization, nullptr},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data5,
          (TfLiteIntArray *)&tensor_dimension5,
          8,
          {kTfLiteNoQuantization, nullptr},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt8,
          (void *)tensor_data6,
          (TfLiteIntArray *)&tensor_dimension6,
          312,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant6))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data7,
          (TfLiteIntArray *)&tensor_dimension7,
          32,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant7))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt8,
          (void *)tensor_data8,
          (TfLiteIntArray *)&tensor_dimension8,
          384,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant8))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data9,
          (TfLiteIntArray *)&tensor_dimension9,
          64,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant9))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt8,
          (void *)tensor_data10,
          (TfLiteIntArray *)&tensor_dimension10,
          4160,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant10))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data11,
          (TfLiteIntArray *)&tensor_dimension11,
          80,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant11))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt8,
          (void *)tensor_data12,
          (TfLiteIntArray *)&tensor_dimension12,
          40,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant12))},
      },
      {
          kTfLiteMmapRo,
          kTfLiteInt32,
          (void *)tensor_data13,
          (TfLiteIntArray *)&tensor_dimension13,
          8,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant13))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension14,
          650,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant14))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 656,
          (TfLiteIntArray *)&tensor_dimension15,
          400,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant15))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension16,
          400,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant16))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 400,
          (TfLiteIntArray *)&tensor_dimension17,
          200,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant17))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension18,
          200,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant18))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 400,
          (TfLiteIntArray *)&tensor_dimension19,
          400,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant19))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension20,
          400,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant20))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 400,
          (TfLiteIntArray *)&tensor_dimension21,
          208,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant21))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension22,
          208,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant22))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 208,
          (TfLiteIntArray *)&tensor_dimension23,
          20,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant23))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 16,
          (TfLiteIntArray *)&tensor_dimension24,
          2,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant24))},
      },
      {
          kTfLiteArenaRw,
          kTfLiteInt8,
          tensor_arena + 0,
          (TfLiteIntArray *)&tensor_dimension25,
          2,
          {kTfLiteAffineQuantization, const_cast<void *>(static_cast<const void *>(&quant25))},
      },
  };
  const NodeInfo_t nodeData[] = {
      {
          (TfLiteIntArray *)&inputs0,
          (TfLiteIntArray *)&outputs0,
          const_cast<void *>(static_cast<const void *>(&opdata0)),
          OP_RESHAPE,
      },
      {
          (TfLiteIntArray *)&inputs1,
          (TfLiteIntArray *)&outputs1,
          const_cast<void *>(static_cast<const void *>(&opdata1)),
          OP_CONV_2D,
      },
      {
          (TfLiteIntArray *)&inputs2,
          (TfLiteIntArray *)&outputs2,
          const_cast<void *>(static_cast<const void *>(&opdata2)),
          OP_RESHAPE,
      },
      {
          (TfLiteIntArray *)&inputs3,
          (TfLiteIntArray *)&outputs3,
          const_cast<void *>(static_cast<const void *>(&opdata3)),
          OP_MAX_POOL_2D,
      },
      {
          (TfLiteIntArray *)&inputs4,
          (TfLiteIntArray *)&outputs4,
          const_cast<void *>(static_cast<const void *>(&opdata4)),
          OP_RESHAPE,
      },
      {
          (TfLiteIntArray *)&inputs5,
          (TfLiteIntArray *)&outputs5,
          const_cast<void *>(static_cast<const void *>(&opdata5)),
          OP_CONV_2D,
      },
      {
          (TfLiteIntArray *)&inputs6,
          (TfLiteIntArray *)&outputs6,
          const_cast<void *>(static_cast<const void *>(&opdata6)),
          OP_RESHAPE,
      },
      {
          (TfLiteIntArray *)&inputs7,
          (TfLiteIntArray *)&outputs7,
          const_cast<void *>(static_cast<const void *>(&opdata7)),
          OP_MAX_POOL_2D,
      },
      {
          (TfLiteIntArray *)&inputs8,
          (TfLiteIntArray *)&outputs8,
          const_cast<void *>(static_cast<const void *>(&opdata8)),
          OP_RESHAPE,
      },
      {
          (TfLiteIntArray *)&inputs9,
          (TfLiteIntArray *)&outputs9,
          const_cast<void *>(static_cast<const void *>(&opdata9)),
          OP_FULLY_CONNECTED,
      },
      {
          (TfLiteIntArray *)&inputs10,
          (TfLiteIntArray *)&outputs10,
          const_cast<void *>(static_cast<const void *>(&opdata10)),
          OP_FULLY_CONNECTED,
      },
      {
          (TfLiteIntArray *)&inputs11,
          (TfLiteIntArray *)&outputs11,
          const_cast<void *>(static_cast<const void *>(&opdata11)),
          OP_SOFTMAX,
      },
  };
  static std::vector<void *> overflow_buffers;
  static void *AllocatePersistentBuffer(struct TfLiteContext *ctx,
                                        size_t bytes)
  {
    void *ptr;
    if (current_location - bytes < tensor_boundary)
    {
      // OK, this will look super weird, but.... we have CMSIS-NN buffers which
      // we cannot calculate beforehand easily.
      ptr = ei_calloc(bytes, 1);
      if (ptr == NULL)
      {
        printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
        return NULL;
      }
      overflow_buffers.push_back(ptr);
      return ptr;
    }

    current_location -= bytes;

    ptr = current_location;
    memset(ptr, 0, bytes);

    return ptr;
  }
  typedef struct
  {
    size_t bytes;
    void *ptr;
  } scratch_buffer_t;
  static std::vector<scratch_buffer_t> scratch_buffers;

  static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *ctx, size_t bytes,
                                                  int *buffer_idx)
  {
    scratch_buffer_t b;
    b.bytes = bytes;

    b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
    if (!b.ptr)
    {
      return kTfLiteError;
    }

    scratch_buffers.push_back(b);

    *buffer_idx = scratch_buffers.size() - 1;

    return kTfLiteOk;
  }

  static void *GetScratchBuffer(struct TfLiteContext *ctx, int buffer_idx)
  {
    if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1)
    {
      return NULL;
    }
    return scratch_buffers[buffer_idx].ptr;
  }

  static TfLiteTensor *GetTensor(const struct TfLiteContext *context,
                                 int tensor_idx)
  {
    return &tflTensors[tensor_idx];
  }

  static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                         int tensor_idx)
  {
    return &tflEvalTensors[tensor_idx];
  }

} // namespace

TfLiteStatus trained_model_init(void *(*alloc_fnc)(size_t, size_t))
{
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t *)alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena)
  {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 26;
  for (size_t i = 0; i < 26; ++i)
  {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if (tflTensors[i].allocation_type == kTfLiteArenaRw)
    {
      uint8_t *start = (uint8_t *)((uintptr_t)tensorData[i].data + (uintptr_t)tensor_arena);

      tflTensors[i].data.data = start;
      tflEvalTensors[i].data.data = start;
    }
    else
    {
      tflTensors[i].data.data = tensorData[i].data;
      tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization)
    {
      TfLiteAffineQuantization const *quant = ((TfLiteAffineQuantization const *)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw)
    {
      auto data_end_ptr = (uint8_t *)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary)
      {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */)
  {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 12; ++i)
  {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init)
    {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char *)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 12; ++i)
  {
    if (registrations[nodeData[i].used_op_index].prepare)
    {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk)
      {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
    0,
};
TfLiteTensor *trained_model_input(int index)
{
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
    25,
};
TfLiteTensor *trained_model_output(int index)
{
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke()
{
  for (size_t i = 0; i < 12; ++i)
  {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++)
    {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw)
      {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8)
      {
        int8_t *data = (int8_t *)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++)
        {
          ei_printf("%d ", data[jx]);
        }
      }
      else
      {
        float *data = (float *)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++)
        {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++)
    {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw)
      {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8)
      {
        int8_t *data = (int8_t *)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++)
        {
          ei_printf("%d ", data[jx]);
        }
      }
      else
      {
        float *data = (float *)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++)
        {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk)
    {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset(void (*free_fnc)(void *ptr))
{
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++)
  {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
